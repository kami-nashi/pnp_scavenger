#!/usr/bin/env python3

# sudo pip3 install beautifulsoup4 requests lxml

from __future__ import print_function

from bs4 import BeautifulSoup
import requests
import sys
import argparse
import json

LOCATIONS = {'1168': 'LKQ of Raleigh',
             '1142': 'LKQ of Durham',
             '1226': 'LKQ of Greensboro',
             '1227': 'LKQ of Greenville',
             '1228': 'LKQ of Charlotte'}


# take search parameters and make an HTTP request for the content
def fetch_html(make, model, year, location):
    search_filter = '%s %s %s' % (make, model, year)
    url = 'http://www.lkqpickyourpart.com/DesktopModules/pyp_vehicleInventory/getVehicleInventory.aspx?page=0&filter=%s&sp=&cl=&carbuyYardCode=%s&pageSize=10&language=en-US' % (search_filter, location)
    req = requests.get(url)
    return req.text


# runs the correct searches based on user input
def do_search(make, model, year_start, year_end, locations):
    results = {}
    for location_id in locations:
        results[location_id] = []
        for year in range(year_start, year_end):
            content = fetch_html(make, model, year, location_id)
            soup = BeautifulSoup(content, 'html.parser')
            # diagnostic output of stuff we found
            # print(soup.prettify())

            #results[location_id].append(soup.find_all('a'))
            results[location_id].append(soup)

    return results


# take the results and display them
def print_results(results):
    for location_id, items in results.items():
        print('\n')
        for item in items:
#            print('\n')
            for a in item.find_all('a'):
                print('\n')
                print(LOCATIONS[location_id])
                caption_soup = BeautifulSoup(a['caption'], 'html.parser')
                caption_p = caption_soup.find_all('p')
                megalist = []
                for p in caption_p:
#                   returns .....
#                      name/make/model for [0]
#                      useless string [1]
#                      availablity [2]
                    list_results = []
                    if p.parent.name != 'p':
                      #print(p.text)
                      list_results.append(p.text)
#                   returns.....
#                   other details
                    else:
                      list_results.append(p.text)
                    #del results[1]
                    #print(list_results)
                    megalist.append(list_results)
                del megalist[1]
                del megalist[6]
#                print(megalist[0])
#                print(", ".join(megalist[0]))
                for i in megalist:
#                    print(i)
                    print(", ".join(i))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Search Places.')
    parser.add_argument('-l', '--location', type=str, default=None, required=True, help='Specify the location ID to search')
    parser.add_argument('-ma', '--make', type=str, default=None, help='Specify the make')
    parser.add_argument('-mo', '--model', type=str, default=None, help='Specify the model')
    parser.add_argument('-ys', '--year-start', type=int, default=None)
    parser.add_argument('-ye', '--year-end', type=int, default=None)

    args = parser.parse_args()

    # This makes the location an iterable list
    location_list = args.location.split(',')  # ['3','9','10']
    print('\n')
    matches = do_search(args.make, args.model, args.year_start, args.year_end, location_list)
    if not matches:
        sys.exit(0)

    print_results(matches)
